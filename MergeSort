#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>

using namespace std;

bool sortFunc(const vector<int>& vec1, const vector<int> vec2) {
    return vec1[1] < vec2[1];
}

template <typename dataType> class Merge {
public:       
    vector<vector<int>> merge(vector<vector<int>> &input) {
        try {
            if (input.size() < 2) {
                throw 1;
            }
            else {
                //cout << "Valid input vector<vector<T>>" << endl;
            }
        }
        catch (int num) {
            if (num == 1) {
                cout << "Invalid input vector<vector<T>>" << endl;
                cout << "Invalid input is: ";
                return input;
            }
        }
        vector<vector<int>> result;
        vector<int> current_interval;
        vector<int> next_interval;
        int size = 0;
        for (int i = 0; i < input.size(); i++) {
            size = size + input[i].size();
            sort(input.begin(), input.end(), sortFunc);
        }
        // cout << "### ";
        this->print(input);
        //cout << "Size: " << size << endl;
        current_interval = input[0];
        for (int i = 0; i < input.size(); i++) {
            //print(result);
            if ((i+1) > input.size()) {
                return result;
            }
            else {

                next_interval = input[i];
                if (current_interval[1] < next_interval[0]) {
                    //these do not overlap
                    result.push_back(current_interval);
                    current_interval = input[i];
                }
                else {
                    //these do overlap
                    current_interval[0] = min(current_interval[0], next_interval[0]);
                    current_interval[1] = max(current_interval[1], next_interval[1]);
                }
            }
        }
        result.push_back(current_interval);
        return result;
    }
    //void print(vector<vector<int>> &input) {
    //    int size = 0;
    //    for (int i = 0; i < input.size(); i++) {
    //        size = size + input[i].size();
    //    }
    //    //initialize to one so that it waits to fill in values for printing
    //    //also helpful for the formatting of the print... 
    //    int counter = 1;
    //    int current = 0;
    //    int last = 0;
    //    cout << "[";
    //    for (int i = 0; i < input.size(); i++) {
    //        for (int j = 0; j < input[i].size(); j++) {
    //            current = last;
    //            last = input[i][j];
    //            if ((counter % 2 == 0) && (counter <= size)) {
    //                cout << "(" << current << "," << last << ")";
    //            }
    //            if ((counter % 2 != 0) && (counter != 1)) {
    //                cout << ",";
    //            }
    //            counter++;
    //        }
    //    }
    //    cout << "]" << endl;
    //    return;
    //}
    void print(vector<vector<int>> intervals) {
        for (auto i : intervals) {
            cout << "(" << i[0] << "," << i[1] << ") ";
        }
    }

};


int main() {
    vector<vector<int>> array1, array2, array3, array4;
    vector<vector<int>> ans;
    //Make object of Class Merge with template T used as int
    Merge<int> s;

    array1 = {{2,5},{1,4},{3,9},{20, 29},{7,16}, {15, 27}};
    array2 = {{1,3},{2,6},{8,10},{15,18}};
    array3 = {{2,5},{6,10},{15,20},{30,31}};
    array4 = {{1,4}};

    // Merge first array and print
    cout << "array 1 after merge: \n";
    ans = s.merge(array1);
    s.print(ans);

    // Merge second array and print
    cout << "\narray 2 after merge: \n";
    ans = s.merge(array2);
    s.print(ans);

    // Merge third array and print
    cout << "\narray 3 after merge: \n";
    ans = s.merge(array3);
    s.print(ans);

    // Merge forth array and print
    cout << "\narray 4 after merge: \n";
    ans = s.merge(array4);
    s.print(ans);


    return 0;
}
